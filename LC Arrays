Lc Q 75 Sort color
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int index=0;
        int left=0;
        int right=n-1;
        while(index<=right){
            if(nums[index]==0){
                swap(nums[index],nums[left]);
                left++;
                index++;
            }
            else if(nums[index]==2){
                swap(nums[index],nums[right]);
                right--;
                // catch no need of index++
            }
            else{
                index++;
            }
        }
    }
};


//Lc 2149. Rearrange Array Elements by Sign
class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        vector<int>pos,neg;
        for(int i=0;i<nums.size();i++){
            if(nums[i]<0)
                neg.push_back(nums[i]);
            else
                pos.push_back(nums[i]);
        }
        vector<int>ans;
        int i=0;
        while(i<pos.size()){
            ans.push_back(pos[i]);
            ans.push_back(neg[i]);
            i++;
        }
        return ans;
    }
};

//Lc 268. Missing Number
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int sum=0;
        int n=nums.size();
        for(int index=0;index<n;index++){
            sum=sum+nums[index];
        }
        int totalSum=((n)*(n+1))/2;
        int ans= totalSum-sum;
        return ans;
    }
};

//Lc 2149. Rearrange Array Elements by Sign
class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        vector<int>pos,neg;
        for(int i=0;i<nums.size();i++){
            if(nums[i]<0)
                neg.push_back(nums[i]);
            else
                pos.push_back(nums[i]);
        }
        vector<int>ans;
        int i=0;
        while(i<pos.size()){
            ans.push_back(pos[i]);
            ans.push_back(neg[i]);
            i++;
        }
        return ans;
    }
};
//Lc 2643. Row With Maximum Ones
class Solution {
public:
    vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {
        vector<int>ans;
        int n=mat.size();
        int onecount =INT_MIN;
        int rowNo=-101;

        for(int i=0;i<n;i++){
            int count=0;
            for(int j=0;j<mat[i].size();j++){
                if (mat[i][j]==1){
                    count++;
                }
            }
            
            if(count>onecount){
            onecount=count;
            rowNo=i;
        }

        }    
         
           ans.push_back(rowNo);
         ans.push_back(onecount);
         return ans;
    }
  
};
// LC 48. Rotate Image

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
            // transpose
        for(int i=0;i<n;i++){
            for(int j=i;j<matrix[i].size();j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
        //reverse 2 d matrix  ki sari row ko 0- n-1
        for(int i=0;i<n;i++){
            // har row ko reverse kar na hee
            reverse(matrix[i].begin(),matrix[i].end());
        }
    }
};

// lc 724. Find Pivot Index

// Approach 1 :
class Solution
{
    public:
        int bruteforce(vector<int> &nums)
        {
            for (int i = 0; i < nums.size(); ++i)
            {
                int lsum = 0;
                int rsum = 0;
               	// find left sum excluding current index

                for (int j = 0; j < i; ++j){
                    lsum += nums[j];
                }

               	//  same for right
                for (int j =i+1 ; j < nums.size(); ++j)
                   {   
                    rsum += nums[j];
                    }

                if (lsum == rsum) 
                {return i;}
            }
            return -1;
        }
       
    int pivotIndex(vector<int> &nums)
    {
        return bruteforce(nums);
    }
};

//Approach 2:
class Solution
{
    public:
        int bruteforce(vector<int> &nums)
        {
            for (int i = 0; i < nums.size(); ++i)
            {
                int lsum = 0;
                int rsum = 0;
               	// find left sum excluding current index

                for (int j = 0; j < i; ++j){
                    lsum += nums[j];
                }

               	//  same for right
                for (int j =i+1 ; j < nums.size(); ++j)
                   {   
                    rsum += nums[j];
                    }

                if (lsum == rsum) 
                {return i;}
            }
            return -1;
        }
    int prefixsumApproach(vector<int>&nums){
        vector<int> lsum(nums.size(),0);
        vector<int> rsum(nums.size(),0);
        // cal lsum
        for(int i=1;i<nums.size();++i){
                lsum[i] = lsum[i-1] + nums[i-1];
        }
         // cal rsum
        for(int i=nums.size()-2;i>=0;--i){
                rsum[i] = rsum[i+1] + nums[i+1];
        }

        // check
         for(int i=0;i<nums.size();++i){
            if(lsum[i] == rsum[i]){
                return i;
            }
         }
         return -1;
  
    }
    int pivotIndex(vector<int> &nums)
    {
        //return bruteforce(nums);
        return prefixsumApproach(nums);
     }
};

//LC Q 75 sort color
// three approach 1 sorting  2 count and spread 3 threee pointer
class Solution {
public:
    void sortColors(vector<int>& nums) {
    //     int n=nums.size();
    //     int index=0;
    //     int left=0;
    //     int right=n-1;
    //     while(index<=right){
    //         if(nums[index]==0){
    //             swap(nums[index],nums[left]);
    //             left++;
    //             index++;
    //         }
    //         else if(nums[index]==2){
    //             swap(nums[index],nums[right]);
    //             right--;
    //             // catch no need of index++
    //         }
    //         else{
    //             index++;
    //         }
    //     }
    // }

    //counting
//     int zeros,ones,twos;
//     zeros = ones= twos = 0;
//      for(int i=0;i<nums.size();i++){
//         if(nums[i]== 0){
//             zeros++;

//         }
//          else if(nums[i]==1){
//             ones++;
//         }
//         else{
//             twos++;
//         }
//      }
//    // spread
//     int i=0;
//     while(zeros--){
//         nums[i]=0;
//         i++;
//     }
//     while(ones--){
//         nums[i]=1;
//         i++;
//     }
//     while(twos--){
//         nums[i]=2;
//         i++;
//       }
//     }

// three pointer approach
  int l=0,m=0,h=nums.size()-1;
  while(m<=h){
        if(nums[m]==0){
            swap(nums[l],nums[m]);
                l++,m++;
     }
  else if(nums[m]== 1){
    m++;
  }
  else{
    swap(nums[m],nums[h]);
            h--; 
             
      }
  }
    }
};

//Lc 287  find the duplicate number
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        // sort(nums.begin(),nums.end());{
        //     for(int i=0;i<nums.size()-1;i++){
        //         if(nums[i]== nums[i+1]){
        //             return nums[i];
        //         }
        //     }
        // }
        // return -1;

    //     //-ve marking solution
    //     int ans=-1;
    //     for(int i=0;i<nums.size();i++){
    //         int index = abs(nums[i]);

    //         //Already visited
    //         if(nums[index]<0){
    //             return index;
    //         }
    //         //visited mark
    //         nums[index]*=-1;

    //     }
    //   return ans;

    //Positing method

    while(nums[0] != nums[nums[0]]){
        swap(nums[0],nums[nums[0]]);
    }
     return nums[0];
    }
};

//
